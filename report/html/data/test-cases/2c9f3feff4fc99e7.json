{
  "uid" : "2c9f3feff4fc99e7",
  "name" : "代理商数据",
  "fullName" : "test.test_api#test_main",
  "historyId" : "3a098e261ee7b9115a8be890393002aa",
  "time" : {
    "start" : 1654679621809,
    "stop" : 1654679622374,
    "duration" : 565
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:1946259.28 || 预期结果: 3209085.84",
  "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 10785.0, 'activation_rate': 0.9486, 'add_num': 10259.0, 'add_rate'...m': 132.0, 'activation_rate': 0.9565, 'add_num': 119.0, 'add_rate': 0.9015, ...}, ...], 'count': 10}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert str(actual) == str(v)\nE               AssertionError\n\ntools\\data_process.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c3', '代理商数据', '', '/advertising/data/agent', 'post', 'json', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = client.action(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 10785.0, 'activation_rate': 0.9486, 'add_num': 10259.0, 'add_rate'...m': 132.0, 'activation_rate': 0.9565, 'add_num': 119.0, 'add_rate': 0.9015, ...}, ...], 'count': 10}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert str(actual) == str(v)\n            except AssertionError:\n>               raise AssertionError(\n                    f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:1946259.28 || 预期结果: 3209085.84\n\ntools\\data_process.py:148: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1654679621808,
      "stop" : 1654679621808,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:1946259.28 || 预期结果: 3209085.84",
    "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 10785.0, 'activation_rate': 0.9486, 'add_num': 10259.0, 'add_rate'...m': 132.0, 'activation_rate': 0.9565, 'add_num': 119.0, 'add_rate': 0.9015, ...}, ...], 'count': 10}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert str(actual) == str(v)\nE               AssertionError\n\ntools\\data_process.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c3', '代理商数据', '', '/advertising/data/agent', 'post', 'json', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = client.action(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 10785.0, 'activation_rate': 0.9486, 'add_num': 10259.0, 'add_rate'...m': 132.0, 'activation_rate': 0.9565, 'add_num': 119.0, 'add_rate': 0.9015, ...}, ...], 'count': 10}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert str(actual) == str(v)\n            except AssertionError:\n>               raise AssertionError(\n                    f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:1946259.28 || 预期结果: 3209085.84\n\ntools\\data_process.py:148: AssertionError",
    "steps" : [ {
      "name" : "请求地址: https://lh-launch-platform.dev1.weike.fm/advertising/data/agent",
      "time" : {
        "start" : 1654679621809,
        "stop" : 1654679621809,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1654679621809,
        "stop" : 1654679621810,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8734651f515cf4a1",
        "name" : "请求头",
        "source" : "8734651f515cf4a1.json",
        "type" : "application/json",
        "size" : 204
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1654679621810,
        "stop" : 1654679621811,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "158c102a5e1b9732",
        "name" : "请求数据",
        "source" : "158c102a5e1b9732.json",
        "type" : "application/json",
        "size" : 178
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    }, {
      "name" : "响应耗时(s): 0.555818",
      "time" : {
        "start" : 1654679622370,
        "stop" : 1654679622370,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "响应结果",
      "time" : {
        "start" : 1654679622370,
        "stop" : 1654679622371,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "b347323275d82e60",
        "name" : "响应结果",
        "source" : "b347323275d82e60.json",
        "type" : "application/json",
        "size" : 19459
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    }, {
      "name" : "当前可用参数池",
      "time" : {
        "start" : 1654679622371,
        "stop" : 1654679622372,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "61bbe97b26fbb209",
        "name" : "当前可用参数池",
        "source" : "61bbe97b26fbb209.json",
        "type" : "application/json",
        "size" : 32
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1654679622373,
        "stop" : 1654679622373,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c86387f808879d8a",
        "name" : "第1个断言",
        "source" : "c86387f808879d8a.json",
        "type" : "application/json",
        "size" : 51
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-GFT8T1F"
  }, {
    "name" : "thread",
    "value" : "13948-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c3', '代理商数据', '', '/advertising/data/agent', 'post', 'json', '', '{\"tid\":17,\"page\":1,\"limit\":20,\"project_id\":1,\"camp_id\":100693,\"term_id\":105297,\"begin_time\":\"2022-03-02\",\"end_time\":\"2022-03-06\"}', '', '', '{\"$.data.content[0].total_cost\":\"${total_cost}\"}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2c9f3feff4fc99e7.json",
  "parameterValues" : [ "['c3', '代理商数据', '', '/advertising/data/agent', 'post', 'json', '', '{\"tid\":17,\"page\":1,\"limit\":20,\"project_id\":1,\"camp_id\":100693,\"term_id\":105297,\"begin_time\":\"2022-03-02\",\"end_time\":\"2022-03-06\"}', '', '', '{\"$.data.content[0].total_cost\":\"${total_cost}\"}']" ]
}