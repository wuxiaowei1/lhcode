{"name": "投手数据", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:1220765.71 || 预期结果: 3209085.84", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 7022.0, 'activation_rate': 0.947, 'add_num': 6672.0, 'add_rate': 0...m': 975.0, 'activation_rate': 0.9673, 'add_num': 923.0, 'add_rate': 0.9467, ...}, ...], 'count': 12}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert str(actual) == str(v)\nE               AssertionError\n\ntools\\data_process.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c4', '投手数据', '', '/advertising/data/pitcher', 'post', 'json', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = client.action(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': {'content': [{'activation_num': 7022.0, 'activation_rate': 0.947, 'add_num': 6672.0, 'add_rate': 0...m': 975.0, 'activation_rate': 0.9673, 'add_num': 923.0, 'add_rate': 0.9467, ...}, ...], 'count': 12}, 'msg': 'success'}\nexpect_str = '{\"$.data.content[0].total_cost\":\"3209085.84\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        logger.info(f\"extra_pool{cls.extra_pool}\")\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        logger.info(f\"expect_str{expect_str}\")\n        expect_dict = convert_json(expect_str)\n        logger.info(f\"expect_dict{expect_dict}\")\n        index = 0\n        logger.info(f\"response{response}\")\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            # if cls.extra_pool[\"total_cost\"] != \"0\":\n            #     v = cls.extra_pool\n            # logger.info(f\"actual{actual}\")\n            # logger.info(f\"extra_pool{v}\")\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {v == actual}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert str(actual) == str(v)\n            except AssertionError:\n>               raise AssertionError(\n                    f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:1220765.71 || 预期结果: 3209085.84\n\ntools\\data_process.py:148: AssertionError"}, "steps": [{"name": "请求地址: https://lh-launch-platform.dev1.weike.fm/advertising/data/pitcher", "status": "passed", "start": 1654679622527, "stop": 1654679622527}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "74e88d24-f06b-4ee6-abcb-4bc2fe51e4d9-attachment.json", "type": "application/json"}], "start": 1654679622527, "stop": 1654679622528}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "2f61610b-db90-42c1-abe4-301acd224255-attachment.json", "type": "application/json"}], "start": 1654679622528, "stop": 1654679622528}, {"name": "响应耗时(s): 1.792308", "status": "passed", "start": 1654679624326, "stop": 1654679624326}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "3e777fd6-dc04-4d29-a6d8-d3c79b35842f-attachment.json", "type": "application/json"}], "start": 1654679624326, "stop": 1654679624327}, {"name": "当前可用参数池", "status": "passed", "attachments": [{"name": "当前可用参数池", "source": "2ac522a2-ca6c-4f47-af71-acee3e284c34-attachment.json", "type": "application/json"}], "start": 1654679624328, "stop": 1654679624328}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "ae9aaaa7-fc91-4f16-84c8-7d6f17571d18-attachment.json", "type": "application/json"}], "start": 1654679624330, "stop": 1654679624330}], "parameters": [{"name": "cases", "value": "['c4', '投手数据', '', '/advertising/data/pitcher', 'post', 'json', '', '{\"tid\":17,\"page\":1,\"limit\":20,\"project_id\":1,\"camp_id\":100693,\"term_id\":105297,\"begin_time\":\"2022-03-02\",\"end_time\":\"2022-03-06\"}', '', '', '{\"$.data.content[0].total_cost\":\"${total_cost}\"}']"}], "start": 1654679622527, "stop": 1654679624330, "uuid": "f5b8bb87-7f87-4f69-a24d-66c14c03f5f5", "historyId": "f9a3a528aa08d345b131e068670a2332", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-GFT8T1F"}, {"name": "thread", "value": "13948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}